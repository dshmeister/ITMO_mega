stages:
  - build
  - delivery
  - deploy
  #- test

variables:
  TEST_SERVER: $SERVER_USER@$TEST_SERVER_IP
  PROD_SERVER: $SERVER_USER@$PROD_SERVER_IP

services:
  - docker:dind

.build: &build
  stage: build
  tags:
    - ai-docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin

.delivery: &delivery
  stage: delivery
  tags:
    - ai-docker
  before_script:
    - eval "$(ssh-agent -s)"
    - ssh-add <(echo "$SSH_KEY" | base64 -d)
    - 'mkdir -p ~/.ssh'
    - 'chmod 700 ~/.ssh'
    - ssh-keyscan $PROD_SERVER_IP >> ~/.ssh/known_hosts
    - ssh-keyscan $TEST_SERVER_IP >> ~/.ssh/known_hosts

.deploy: &deploy
  stage: deploy
  tags:
    - ai-docker
  before_script:
    - eval "$(ssh-agent -s)"
    - ssh-add <(echo "$SSH_KEY" | base64 -d)
    - 'mkdir -p ~/.ssh'
    - 'chmod 700 ~/.ssh'
    - ssh-keyscan $PROD_SERVER_IP >> ~/.ssh/known_hosts
    - ssh-keyscan $TEST_SERVER_IP >> ~/.ssh/known_hosts

#.test: &test
#  stage: test
#  tags:
#    - ai-docker
#  before_script:
#    - eval "$(ssh-agent -s)"
#    - ssh-add <(echo "$SSH_KEY" | base64 -d)
#    - 'mkdir -p ~/.ssh'
#    - 'chmod 700 ~/.ssh'
#    - ssh-keyscan $TEST_SERVER_IP >> ~/.ssh/known_hosts
#    - ssh-keyscan $PROD_SERVER_IP >> ~/.ssh/known_hosts

build-job-app:
  <<: *build
  script:
    - docker build -t $CI_REGISTRY_IMAGE:app -f Dockerfile.gunicorn .
    - docker push $CI_REGISTRY_IMAGE:app

delivery-test:
  <<: *delivery
  script:
    - 'scp -i <(echo "$SSH_KEY" | base64 -d) docker-compose-dev.yml $TEST_SERVER:~/ticket-classification-dev/docker-compose.yml'
    - 'scp -i <(echo "$SSH_KEY" | base64 -d) $ENV_FILE_TEST $TEST_SERVER:~/ticket-classification-dev/.env'
    - >
      ssh $TEST_SERVER "
      echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin &&
      docker pull $CI_REGISTRY_IMAGE:app &&
      docker tag $CI_REGISTRY_IMAGE:app ticket_classification
      "


deploy-test:
  <<: *deploy
  script:
    - >
      ssh $TEST_SERVER "
      cd ticket-classification-dev &&
      docker compose up -d
      "

#test-job-app:
#  <<: *test
#  script:
#    - echo "Checking /app directory"
#    - ssh $TEST_SERVER 'docker exec -e PYTHONPATH=/app ticket_classification ls -al /app'
#    - echo "Running tests"
#    - ssh $TEST_SERVER 'docker exec -e PYTHONPATH=/app/tests receipt_extract pytest'


delivery-prod:
  <<: *delivery
  script:
    - 'scp -i <(echo "$SSH_KEY" | base64 -d) docker-compose-dev.yml $PROD_SERVER:~/ticket-classification-prod/docker-compose.yml'
    - 'scp -i <(echo "$SSH_KEY" | base64 -d) $ENV_FILE_PROD $PROD_SERVER:~/ticket-classification-prod/.env'
    - >
      ssh $PROD_SERVER "
      echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin &&
      docker pull $CI_REGISTRY_IMAGE:app &&
      docker tag $CI_REGISTRY_IMAGE:app ticket_classification &&
      "
  only:
    - main

deploy-prod:
  <<: *deploy
  script:
    - >
      ssh $PROD_SERVER "
      cd ticket-classification-prod &&
      docker compose up -d
      "
  only:
    - main
